"""
–ú–∞—Ä–∫–∞–ø—ã –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –∏–≥—Ä–µ - —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏ –∏–Ω–ª–∞–π–Ω
"""

import math
from collections import Counter

from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from lib.classes.user import User
from lib.variables import cards_dict

CARDS_PER_PAGE = 7


async def generate_collection_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                       telegram_user_id, page: int, in_market: bool, trade=None,
                                       trade_receiver: int = None):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ( –≤–∑—è—Ç–æ —Å —á–∞—Ç–≥–ø—Ç, –ø–æ—ç—Ç–æ–º—É —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ —Å–æ–≤–µ—Ç—É—é —Å: )
    :param trade_receiver: ~~
    :param trade: ~~
    :param context: ~~
    :param update: ~~
    :param in_market: –¥–ª—è –º–∞—Ä–∫–µ—Ç–∞
    :param telegram_user_id: id —é–∑–µ—Ä–∞
    :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :return: –º–∞—Ä–∫–∞–ø —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    user_cards = User.get(user=None, update=telegram_user_id).collection
    user_cards = [cards_dict[x] for x in user_cards]
    user_trade = User.get(user=None, update=telegram_user_id).trade

    card_counter = Counter(card['code'] for card in user_cards)

    unique_cards = list(set(card['code'] for card in user_cards))
    unique_cards.sort()

    total_pages = math.ceil(len(unique_cards) / CARDS_PER_PAGE)

    if not unique_cards:
        await context.bot.send_message(text="–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö "
                                            "- –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç.",
                                       chat_id=update.effective_user.id,
                                       reply_markup=collection_menu_markup)
        return

    start = page * CARDS_PER_PAGE
    end = start + CARDS_PER_PAGE
    current_page_cards = unique_cards[start:end]
    market = "market_" if in_market else ''
    trade_s = "trade_" if trade else ''

    keyboard = []
    for card_code in current_page_cards:
        card = next(card for card in user_cards if card['code'] == card_code)
        count = card_counter[card_code]
        button_text = f"{card['name']} {f'(x{count})'} {'‚úÖ' if card_code in user_trade else ''}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"{market}{trade_s}{card['code']}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("<<", callback_data=f"{trade_s}{market}page_0"))
        nav_buttons.append(InlineKeyboardButton("<", callback_data=f"{trade_s}{market}page_{page - 1}"))
    nav_buttons.append(InlineKeyboardButton(f"{page + 1}", callback_data="noop"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(">", callback_data=f"{trade_s}{market}page_{page + 1}"))
        nav_buttons.append(InlineKeyboardButton(">>", callback_data=f"{trade_s}{market}page_{total_pages - 1}"))

    keyboard.append(nav_buttons)
    if trade:
        keyboard += [[InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                                           callback_data=f'trade_confirm'
                                                         f'_{trade_receiver}')],
                     [InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data="trade_cancel")]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup


shop_inline_markup = InlineKeyboardMarkup([[InlineKeyboardButton("1 –ø–∞–∫ - 10 ü™ô", callback_data="pack_buy_1")],
                                           [InlineKeyboardButton("2 –ø–∞–∫–∞ - 20 ü™ô", callback_data="pack_buy_2")],
                                           [InlineKeyboardButton("3 –ø–∞–∫–∞ - 28 ü™ô", callback_data="pack_buy_3")],
                                           [InlineKeyboardButton("5 –ø–∞–∫–æ–≤ - 47 ü™ô", callback_data="pack_buy_5")],
                                           [InlineKeyboardButton("10 –ø–∞–∫–æ–≤ - 90 ü™ô", callback_data="pack_buy_10")]])


def build_menu(buttons,
               n_cols,
               header_buttons=None,
               footer_buttons=None) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :param buttons: —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞ KeyboardButton("string")
    :param n_cols: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    :param header_buttons: –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param footer_buttons: –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä—è–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :return: —Å–ø–∏—Å–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
    """
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


def get_collection_list(user_collection: list) -> list:
    return [KeyboardButton(x) for x in user_collection] + [KeyboardButton("–ú–µ–Ω—é")] if user_collection \
        else [KeyboardButton("–ú–µ–Ω—é")]


main_menu_buttons = [KeyboardButton("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç"), KeyboardButton("–ö–æ–ª–ª–µ–∫—Ü–∏—è"),
                     KeyboardButton("–û–±–æ –º–Ω–µ"), KeyboardButton("–î—Ä—É–≥–æ–µ")]

roll_menu_buttons = [[KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–∫")], [KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton("–ú–µ–Ω—é")]]

shop_menu_buttons = [[KeyboardButton("–ü–∞–∫–∏"), KeyboardButton("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç")],
                     [KeyboardButton("–ú–µ–Ω—é")]]

other_menu_buttons = [[KeyboardButton("–ú–æ–Ω–µ—Ç–∫–∞"),  # KeyboardButton("–ë–∏—Ç–≤–∞ –∫–∞—Ä—Ç–∞–º–∏")],
                      KeyboardButton("–í—Å–µ –∫–∞—Ä—Ç—ã")], [KeyboardButton("MonoF1"), KeyboardButton("–ú–µ–Ω—é")]]

coinflip_menu_buttons = [[KeyboardButton("–° –∏–≥—Ä–æ–∫–æ–º"), KeyboardButton("–° –±–æ—Ç–æ–º")], [KeyboardButton("–ú–µ–Ω—é")]]

collection_menu_buttons = [KeyboardButton("–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç"), KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É"),
                           KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButton("–¢—Ä–µ–π–¥—ã"),
                           KeyboardButton("–ú–µ–Ω—é")]

trades_menu_buttons = [[KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤"), KeyboardButton("–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")],
                       [KeyboardButton("–ö–æ–ª–ª–µ–∫—Ü–∏—è"), KeyboardButton("–ú–µ–Ω—é")]]

trades_menu_markup = ReplyKeyboardMarkup(trades_menu_buttons, resize_keyboard=True)
main_menu_markup = ReplyKeyboardMarkup(build_menu(main_menu_buttons, n_cols=2), resize_keyboard=True)
roll_menu_markup = ReplyKeyboardMarkup(roll_menu_buttons, resize_keyboard=True)
other_menu_markup = ReplyKeyboardMarkup(other_menu_buttons, resize_keyboard=True)
shop_menu_markup = ReplyKeyboardMarkup(shop_menu_buttons, resize_keyboard=True)
coinflip_menu_markup = ReplyKeyboardMarkup(coinflip_menu_buttons, resize_keyboard=True)
collection_menu_markup = ReplyKeyboardMarkup(build_menu(collection_menu_buttons, n_cols=3), resize_keyboard=True)
