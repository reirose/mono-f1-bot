import random
import re

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler

from lib.classes.user import User
from lib.filters import coinflip_button_filter
from lib.keyboard_markup import coinflip_menu_markup


async def coinflip_menu(update: Update, __: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã",
                                    reply_markup=coinflip_menu_markup)


async def coinflip_entry(update: Update, _: ContextTypes.DEFAULT_TYPE):
    if not User.get(update.message.from_user).coins:
        await update.message.reply_text("–£ –≤–∞—Å —Å–æ–≤—Å–µ–º –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç."
                                        "\n\n<i>–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–≤–Ω—è—Ç–Ω—ã–π –±—É–±–Ω—ë–∂ –ø—Ä–æ –∫—Ä—É–∂–∫—É –ø–∏–≤–∞...</i>",
                                        parse_mode="HTML")
        return ConversationHandler.END

    if User.get(update.message.from_user).coinflip:
        await update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –∏–≥—Ä–∞! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - "
                                        "–Ω–∞–∂–º–∏—Ç–µ /coinflip_cancel",
                                        parse_mode="HTML")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å\n"
                                    "(–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /coinflip_abort)")
    return "coinflip_parse_id"


async def coinflip_parse_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mes = update.message
    try:
        receiver_id = int(update.message.text)
    except ValueError:
        receiver_id = update.message.text

    if receiver_id == mes.from_user.id or receiver_id == mes.from_user.username:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return "coinflip_parse_id"

    if not User.get(user=None, update=receiver_id):
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID –∏–ª–∏ –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return "coinflip_parse_id"

    if not User.get(user=None, update=receiver_id).coins:
        await update.message.reply_text("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º!"
                                        "(–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /coinflip_abort)")
        return "coinflip_parse_id"

    if User.get(user=None, update=receiver_id).coinflip:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–≥—Ä–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º!"
                                        "(–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /coinflip_abort)")
        return "coinflip_parse_id"

    bet_cap = min([User.get(user=None, update=receiver_id).coins, User.get(mes.from_user).coins])
    context.user_data["bet_cap"] = bet_cap
    context.user_data["receiver_id"] = User.get(None, receiver_id).id

    await mes.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (–º–∞–∫—Å–∏–º—É–º: %i)" % bet_cap)

    return "coinflip_bet_handle"


async def coinflip_bet_handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mes = update.message
    bet_cap = context.user_data["bet_cap"]
    receiver_id = context.user_data["receiver_id"]
    try:
        bet = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return "coinflip_bet_handle"

    if bet > bet_cap:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return "coinflip_bet_handle"

    user = User.get(mes.from_user)
    user.coinflip = 1
    user.write()

    resp = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    resp_rec = "@%s –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å—ã–≥—Ä–∞—Ç—å –≤ \"–º–æ–Ω–µ—Ç–∫—É\" –Ω–∞ %i ü™ô" % (mes.from_user.username, bet)
    resp_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å",
                                                                callback_data=f"coinflip_accept_"
                                                                              f"{mes.from_user.id}_{bet}")],
                                          [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                                                callback_data=f"coinflip_decline_{mes.from_user.id}")]])

    sent = await context.bot.send_message(chat_id=receiver_id,
                                          text=resp_rec,
                                          reply_markup=resp_keyboard)

    abort_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å",
                                                                 callback_data=f"coinflip_cancel_{receiver_id}"
                                                                               f"_{sent.message_id}")]])
    await context.bot.send_message(chat_id=mes.from_user.id,
                                   text=resp,
                                   reply_markup=abort_keyboard)

    return ConversationHandler.END


async def cancel(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def abort(update: Update, _: ContextTypes.DEFAULT_TYPE):
    user = User.get(update.message.from_user)
    user.coinflip = 0
    user.write()

    await update.message.reply_text("–£—Å–ø–µ—à–Ω–æ!")


async def coinflip_result(context: ContextTypes.DEFAULT_TYPE):
    query_data = context.job.data[0]["query_data"]
    user_id = context.job.data[0]["user_id"]
    p1 = int(re.search("coinflip_accept_(.+)_(.+)", query_data).group(1))
    p2 = user_id

    winner = User.get(None, random.choice([p1, p2]))
    loser = p1 if winner.id == p2 else p2
    loser = User.get(None, loser)

    bet = int(re.search("coinflip_accept_(.+)_(.+)", query_data).group(2))

    resp_winner = f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n<i>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {bet} ü™ô (–í—Å–µ–≥–æ: {winner.coins + bet} ü™ô)</i>"
    resp_loser = f"{winner.username} –ø–æ–±–µ–¥–∏–ª!\n<i>–°–ø–∏—Å–∞–Ω–æ {bet} ü™ô (–í—Å–µ–≥–æ: {loser.coins - bet} ü™ô)</i>"

    winner.coins += bet
    winner.coinflip = 0
    loser.coins -= bet
    if loser.coins < 0:
        loser.coins = 0
    loser.coinflip = 0

    winner.write()
    loser.write()

    await context.bot.send_message(chat_id=winner.id,
                                   text=resp_winner,
                                   parse_mode="HTML")

    await context.bot.send_message(chat_id=loser.id,
                                   text=resp_loser,
                                   parse_mode="HTML")


coinflip_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(coinflip_button_filter, coinflip_entry)],
    states={
        "coinflip_parse_id": [MessageHandler(filters.TEXT & ~filters.COMMAND, coinflip_parse_id)],
        "coinflip_bet_handle": [MessageHandler(filters.TEXT & ~filters.COMMAND, coinflip_bet_handle)],
    },
    fallbacks=[CommandHandler("coinflip_abort", cancel)]
)
