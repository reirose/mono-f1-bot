import datetime

from telegram import Update
from telegram.ext import ContextTypes

from bin.achievements import bot_check_achievements
from lib.classes.user import User
from lib.keyboard_markup import main_menu_markup
from lib.variables import achievements_dict, roll_cards_dict


async def menu(update: Update, _: ContextTypes.DEFAULT_TYPE):
    mes = update.message
    telegram_user = update.effective_user
    user = User.get(telegram_user)
    if not User.get(update.effective_user):
        return

    cards_n = len(user.collection)
    unique_cards_n = len(list(set(user.collection)))

    collectors_badge = f"{'üéó' if user.statistics['collectors_badge'] else ''}"

    all_cards_rolled = all(code in set(user.collection) for code, __ in roll_cards_dict.items())

    collectors_badge_redeem_s = ("\n\n<i>–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –õ–µ–Ω—Ç—É –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞. –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è "
                                 "–Ω–∞–∂–º–∏—Ç–µ /collectors_ribbon_info</i>") if all_cards_rolled else ""

    banned_badge = "‚ö±Ô∏è" if user.status == "banned" else ""
    days_in_game = int((datetime.datetime.now().timestamp() - user.date_of_registration) // 86400) + 1

    packs_opened = user.statistics["packs_opened"]
    coins_spent = user.statistics["coins_spent"]
    trades_complete = user.statistics["trades_complete"]
    collectors_badges = user.statistics["collectors_badge"]

    response = (f"{banned_badge}<b>{user.username} ‚Ä¢ {user.id}</b>{collectors_badge}\n\n"
                f"üÉè –ö–∞—Ä—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {cards_n}\n"
                f"üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_cards_n}\n"
                f"ü™ô –ú–æ–Ω–µ—Ç: {user.coins}\n"
                f"üìÖ –î–Ω–µ–π –≤ –∏–≥—Ä–µ: <i>{days_in_game}</i>\n\n"
                f"ü§ùüèª –û–±–º–µ–Ω–æ–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–æ: {trades_complete}\n"
                f"üí∏ –ú–æ–Ω–µ—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {coins_spent}\n"
                f"‚≠êÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: /achievements"
                f"{collectors_badge_redeem_s}")

    await mes.reply_text(response,
                         reply_markup=main_menu_markup,
                         parse_mode="HTML")


async def achievements(update: Update, _: ContextTypes.DEFAULT_TYPE):
    user = User.get(update.effective_user)
    await bot_check_achievements(update, _)

    if not user.achievements:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!")
        return

    resp = "<i><b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b></i>\n\n"

    for ach in user.achievements:
        ach = achievements_dict[ach]
        resp += f"<b>{ach['name']}</b> ‚Äî <i>{ach['desc']}</i>\n"

    await update.message.reply_text(resp,
                                    parse_mode="HTML")
