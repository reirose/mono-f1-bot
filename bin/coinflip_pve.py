import random

from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler

from lib.classes.user import User
from lib.filters import coinflip_pve_button_filter
from lib.keyboard_markup import coinflip_menu_markup


async def bot_coinflip_menu(update: Update, __: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã",
                                    reply_markup=coinflip_menu_markup)


async def bot_coinflip_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mes = update.message
    if not User.get(update.message.from_user).coins:
        await update.message.reply_text("–£ –≤–∞—Å —Å–æ–≤—Å–µ–º –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç."
                                        "\n\n<i>–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–≤–Ω—è—Ç–Ω—ã–π –±—É–±–Ω—ë–∂ –ø—Ä–æ –∫—Ä—É–∂–∫—É –ø–∏–≤–∞...</i>",
                                        parse_mode="HTML")
        return ConversationHandler.END

    if User.get(update.message.from_user).coinflip:
        await update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –∏–≥—Ä–∞! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - "
                                        "–Ω–∞–∂–º–∏—Ç–µ /coinflip_cancel",
                                        parse_mode="HTML")
        return ConversationHandler.END

    bet_cap = User.get(mes.from_user).coins
    context.user_data["bet_cap"] = bet_cap

    await mes.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (–º–∞–∫—Å–∏–º—É–º: %i)" % bet_cap)

    return "bot_coinflip_bet_handle"


async def bot_coinflip_bet_handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mes = update.message
    bet_cap = context.user_data["bet_cap"]
    try:
        bet = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return "bot_coinflip_bet_handle"

    if bet > bet_cap:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return "bot_coinflip_bet_handle"

    user = User.get(mes.from_user)
    user.coinflip = bet
    user.write()

    await context.bot.send_message(chat_id=mes.from_user.id,
                                   text="ü™ô")

    context.job_queue.run_once(bot_coinflip_result_handle, 3.5, data=[user.id])

    return ConversationHandler.END


async def bot_coinflip_result_handle(context: ContextTypes.DEFAULT_TYPE):
    user = User.get(None, context.job.data[0])
    winner = random.choice(['bot', user.id])
    bet = user.coinflip
    user.coinflip = 0
    if winner == 'bot':
        user.coins -= bet
        user.write()
        resp = "–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!\n<i>–°–ø–∏—Å–∞–Ω–æ: %i ü™ô (–í—Å–µ–≥–æ: %i ü™ô)</i>" % (bet, user.coins)
        await context.bot.send_message(chat_id=user.id,
                                       text=resp,
                                       parse_mode="HTML")
        return

    user.coins += bet
    user.write()

    resp = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n<i>–ù–∞—á–∏—Å–ª–µ–Ω–æ: %i ü™ô (–í—Å–µ–≥–æ: %i ü™ô)</i>" % (bet, user.coins)
    await context.bot.send_message(chat_id=user.id,
                                   text=resp,
                                   parse_mode="HTML")


async def bot_cancel(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


bot_coinflip_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(coinflip_pve_button_filter, bot_coinflip_entry)],
    states={
        "bot_coinflip_bet_handle": [MessageHandler(filters.TEXT & ~filters.COMMAND, bot_coinflip_bet_handle)],
    },
    fallbacks=[CommandHandler("cancel", bot_cancel)],
    allow_reentry=True  # This will allow canceling at any point
)
